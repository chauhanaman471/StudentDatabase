/*
 * SimpleUI.cpp
 *
 *  Created on: 17 Jan 2025
 *      Author: Asus
 */

#include "SimpleUI.h"
#include <iostream>
#include <string>
#include <fstream>
#include <Poco/Data/Date.h>
#include <Poco/Data/Time.h>
#include <boost/asio.hpp>
#include <boost/json.hpp>
using namespace std;


//Constructor Implementation
SimpleUI::SimpleUI(StudentDb &db): db{db} {
}

void SimpleUI::run() {
	int dbChoice = -1;
	while(dbChoice!=0){
		cout <<"1 : Adding new course"<<endl;
		cout <<"2 : Printing all courses"<<endl;
		cout <<"3 : Adding new student"<<endl;
		cout <<"4 : Adding new enrollment"<<endl;
		cout <<"5 : Print student and their enrolled courses and its results"<<endl;
		cout <<"6 : Search student"<<endl;
		cout <<"7 : Update Student"<<endl;
		cout <<"8 : Write to CSV File"<<endl;
		cout <<"9 : Read from CSV File"<<endl;
		cout <<"10: Obtain data directly from server and Update dB"<<endl;
		cout <<"0 : To exit"<<endl;

        // Handle invalid input
        if (cin.fail()) {
            cin.clear(); // Clear the error flag
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Ignore the rest of the invalid input
            cout << "Invalid input. Please enter a number between 0 and 10." << endl;
            continue; // Restart the loop
        }

		cout <<"Enter the choice for the database: "<<endl;
		cin >> dbChoice;		//getting choice from the user
		switch(dbChoice){
		case 1: {
			cout<<"User have choose to add a new course"<<endl;
			cout <<"Course Key:"<<endl;
			unsigned int courseKey;
			cin >>courseKey;

			cout<<"Course Title:"<<endl;
			cin.ignore();
			string title;
			getline(cin,title);

			cout<<"Course Major (A: Automation, E: Embedded, "
					"C: Communication, P: Power): "<<endl;
			unsigned char major;
			cin >> major;

			cout<<"Course CP: "<<endl;
			float creditPoints;
			cin >> creditPoints;
			db.addCourse(courseKey,title,major,creditPoints);
			break;
		}
		case 2: {
			cout<<"User have choose to print all courses"<<endl;
			db.listCourse(); break;
		}
		case 3: {
			cout<<"User have choose to add a new Student"<<endl;

			cout<<"Student First Name:"<<endl;
			cin.ignore(); // Clear the leftover newline from previous input
			string firstName;
			getline(cin,firstName);
			//cin>>firstName;

			cout<<"Student Last Name:"<<endl;
			string lastName;
			getline(cin,lastName);
			//cin>>lastName;

			cout<<"Student DOB (Year):"<<endl;
			int dobYear;
			cin>>dobYear;
			cout<<"Student DOB (Month):"<<endl;
			int dobMonth;
			cin>>dobMonth;
			cout<<"Student DOB (Date):"<<endl;
			int dobDate;
			cin>>dobDate;
			Poco::Data::Date dob(dobYear,dobMonth,dobDate);

			cout<<"Address: Street Name:"<<endl;
			cin.ignore();
			string streetName;
			getline(cin,streetName);
			//cin >>streetName;

			cout<<"Address: City Name:"<<endl;
			string cityName;
			getline(cin,cityName);
			//cin >>cityName;

			cout<<"Address: Additional Information:"<<endl;
			string additionalInfo;
			getline(cin,additionalInfo);
			//cin >>additionalInfo;

			cout<<"Address: Postal Code:"<<endl;
			unsigned short postalCode;
			cin >>postalCode;

			db.addNewStudent(firstName,lastName,dob,streetName,postalCode,
					cityName,additionalInfo);
			break;
		}
		case 4: {
			cout<<"User have choose to add a new Enrollment"<<endl;
			cout<<"Please enter student Matrikel Number:"<<endl;
			int matrikelNumber;
			cin >>matrikelNumber;

			cout<<"Please enter course key:"<<endl;
			int courseKey;
			cin >>courseKey;

			cout<<"Please enter semester:"<<endl;
			cin.ignore();
			string semester;
			getline(cin,semester);
			db.addEnrollment(matrikelNumber,courseKey,semester);
			break;
		}
		case 5: {
			cout<<"User have choose to print student and their enrolled course "
					"and its result"<<endl;
			cout<<"Student Matrikel Number:"<<endl;
			int matrikelNumber;
			cin >>matrikelNumber;
			db.printStudent(matrikelNumber); break;
		}
		case 6: {
			cout<<"User have choose to search student"<<endl;
			cout<<"Please enter a string/substring from student First Name or Last Name:"<<endl;
			string subString;
			cin >> subString;
			db.searchStudent(subString); break;
		}
		case 7: {
			cout<<"User have choose to update student details"<<endl;
			cout<<"Please enter student Matrikel Number:"<<endl;
			int matrikelNumber;
			cin >> matrikelNumber;
			db.updateStudent(matrikelNumber); break;
		}
		case 8: {
			//writing to csv file
			//Query file name from user
			cout<<"User enter the file Name to write(.csv extension)"<<endl;
			string fileName;
			cin >> fileName;
			//open the file
			std::ofstream file(fileName);
			if (!file) {
			    cout << "Error: Could not open file for writing"<<endl;
			    return;
			}
			//call the studentDB method to write to the file
			db.write(file);
			//close the file
			file.close();
			break;
		}
		case 9:{
			//Reading from csv file
			//Query file name from user to read
			cout<<"User enter the file Name to read(.csv extension)"<<endl;
			string fileName;
			cin >> fileName;
			//open the file
			std::ifstream file(fileName);
			if (!file) {
			    cout << "Error: Could not open file for reading"<<endl;
			    return;
			}
			//call the studentDB method to read the file
			db.read(file);
			//close the file
			file.close();
			break;
		}
		case 10:{
			//obtaining student test data from the server and updating the db

			//Step 01: Query from the user the number of student data to be fetched from server
			cout <<"Enter the number of student data to be added: "<<endl;
			int numStudent;
			cin >> numStudent;

			//Establish the connection to the hda server
			boost::asio::ip::tcp::iostream serverStream("www.hhs.users.h-da.cloud", "4242");
			//check if the connection is established or not
			if(!serverStream){
				cout<<"Error: Could not connect to the server"<<endl;
				break;
			}

			//Loop in to the number of Student entries to be created
			for(int entries = 0;entries<numStudent;entries++){
				//get the generate command to be send to the server
				serverStream <<"generate"<<endl;
				//sends the command to the server immediately
				serverStream.flush();
				//read the data from the server(json format)
				string serverData;
				getline(serverStream,serverData);

				//Parse JSON string into more structured format
				boost::json::value parsedJson = boost::json::parse(serverData);

				//From the structure format data extract the student data
				//boost::json::parse(jsonData) takes the JSON string and converts it into a JSON object.
				//boost::json::value parsedJson stores the parsed JSON data

				// From the structure format data extract the student data
				string firstName = parsedJson.at("name").at("firstName").as_string().c_str();
				string lastName = parsedJson.at("name").at("lastName").as_string().c_str();

				// Use as_int64() instead of as_int()
				int dobYear = parsedJson.at("dateOfBirth").at("year").as_int64() + 1900;
				int dobMonth = parsedJson.at("dateOfBirth").at("month").as_int64() + 1;
				int dobDay = parsedJson.at("dateOfBirth").at("date").as_int64();

				// Convert boost::json::string to std::string before using stoi
				string postalCodeStr = parsedJson.at("location").at("postCode").as_string().c_str();
				unsigned short postalCode = stoi(postalCodeStr); // Now you can safely use stoi

				string street = parsedJson.at("location").at("street").as_string().c_str();
				string city = parsedJson.at("location").at("city").as_string().c_str();

				// Create dob using POCO
				Poco::Data::Date dateOfBirth(dobYear, dobMonth, dobDay);

				// Add student to database
				db.addNewStudent(firstName, lastName, dateOfBirth, street, postalCode, city, "");

			}
			//Close the connection
			serverStream << "quit" << endl;
			serverStream.flush();
			cout << "Connection closed with server"<<endl;

			break;
		}
		case 0: {
			cout<<"Exiting the Program"<<endl;break;
		}
		default: cout<<"Invalid Choice by the user"<<endl; break;
		}
	}

}
